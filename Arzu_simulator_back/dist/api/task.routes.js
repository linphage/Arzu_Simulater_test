"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const task_controller_1 = require("../controllers/task.controller");
const focus_period_controller_1 = require("../controllers/focus-period.controller");
const habit_analysis_controller_1 = require("../controllers/habit-analysis.controller");
const task_validators_1 = require("../utils/task-validators");
const auth_middleware_1 = require("../middleware/auth.middleware");
const rate_limit_middleware_1 = require("../middleware/rate-limit.middleware");
const router = (0, express_1.Router)();
const taskController = new task_controller_1.TaskController();
const focusPeriodController = new focus_period_controller_1.FocusPeriodController();
const habitAnalysisController = new habit_analysis_controller_1.HabitAnalysisController();
router.get('/', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('tasks', 100, 60 * 1000), task_validators_1.taskQueryValidation, taskController.getUserTasks);
router.post('/', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('create-task', 20, 60 * 1000), task_validators_1.createTaskValidation, task_validators_1.validateTaskRequest, taskController.createTask);
router.post('/office', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('create-office-task', 20, 60 * 1000), task_validators_1.createTaskValidation, task_validators_1.validateTaskRequest, taskController.createOfficeTask);
router.get('/stats', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('task-stats', 50, 60 * 1000), taskController.getTaskStats);
router.get('/analytics', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('task-analytics', 30, 60 * 1000), task_validators_1.taskStatsValidation, task_validators_1.validateTaskRequest, taskController.getTaskAnalytics);
router.get('/search', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('search-tasks', 50, 60 * 1000), taskController.searchTasks);
router.get('/upcoming', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('upcoming-tasks', 50, 60 * 1000), taskController.getUpcomingTasks);
router.get('/overdue', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('overdue-tasks', 50, 60 * 1000), taskController.getOverdueTasks);
router.post('/archive', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('archive-tasks', 10, 60 * 1000), taskController.archiveCompletedTasks);
router.post('/batch', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('batch-tasks', 10, 60 * 1000), task_validators_1.batchTaskValidation, task_validators_1.validateTaskRequest, taskController.batchOperateTasks);
router.post('/pomodoro', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('create-pomodoro', 10, 60 * 1000), task_validators_1.createPomodoroSessionValidation, task_validators_1.validateTaskRequest, taskController.createPomodoroSession);
router.patch('/pomodoro/:sessionId/complete', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('complete-pomodoro', 20, 60 * 1000), taskController.completePomodoroSession);
router.patch('/pomodoro/:sessionId/end', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('end-pomodoro', 30, 60 * 1000), taskController.endPomodoroSession);
router.get('/pomodoro', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('get-pomodoro-sessions', 50, 60 * 1000), taskController.getPomodoroSessions);
router.get('/pomodoro/active', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('get-active-pomodoro', 50, 60 * 1000), taskController.getActivePomodoroSession);
router.get('/pomodoro/stats', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('pomodoro-stats', 30, 60 * 1000), taskController.getPomodoroStats);
router.get('/calendar/checkins', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('calendar-checkins', 50, 60 * 1000), taskController.getCalendarCheckIns);
router.post('/calendar/makeup', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('makeup-checkin', 5, 60 * 1000), taskController.createMakeUpCheckIn);
router.get('/calendar/recent-stats', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('recent-stats', 50, 60 * 1000), taskController.getRecentTaskStats);
router.get('/completion/stats', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('completion-stats', 50, 60 * 1000), taskController.getCompletionStats);
router.post('/pomodoro/:sessionId/periods/start', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('start-focus-period', 30, 60 * 1000), focusPeriodController.startPeriod);
router.post('/pomodoro/:sessionId/periods/:periodId/end', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('end-focus-period', 30, 60 * 1000), focusPeriodController.endPeriod);
router.get('/pomodoro/:sessionId/periods', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('get-focus-periods', 50, 60 * 1000), focusPeriodController.getSessionPeriods);
router.get('/pomodoro/:sessionId/periods/active', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('get-active-focus-period', 50, 60 * 1000), focusPeriodController.getActivePeriod);
router.get('/pomodoro/:sessionId/periods/stats', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('get-focus-period-stats', 30, 60 * 1000), focusPeriodController.getSessionPeriodStats);
router.get('/pomodoro/focus-stats', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('focus-stats', 50, 60 * 1000), focusPeriodController.getFocusStats);
router.get('/pomodoro/habit-stats', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('habit-stats', 50, 60 * 1000), habitAnalysisController.getHabitStats);
router.post('/:taskId/pomodoro/:sessionId/complete', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('update-task-completion', 30, 60 * 1000), taskController.updateTaskCompletionFromPomodoro);
router.get('/:id', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('get-task', 100, 60 * 1000), task_validators_1.taskIdParamValidation, task_validators_1.validateTaskRequest, taskController.getTaskById);
router.patch('/:id', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('update-task', 30, 60 * 1000), task_validators_1.taskIdParamValidation, task_validators_1.updateTaskValidation, task_validators_1.validateTaskRequest, taskController.updateTask);
router.delete('/:id', auth_middleware_1.authenticateToken, (0, rate_limit_middleware_1.rateLimiter)('delete-task', 20, 60 * 1000), task_validators_1.taskIdParamValidation, task_validators_1.deleteTaskValidation, task_validators_1.validateTaskRequest, taskController.deleteTask);
exports.default = router;
//# sourceMappingURL=task.routes.js.map
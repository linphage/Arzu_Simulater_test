import axios, { AxiosError, AxiosInstance, InternalAxiosRequestConfig } from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3002';

let isRefreshing = false;
let failedRequestsQueue: Array<{
  resolve: (token: string) => void;
  reject: (error: any) => void;
}> = [];

const axiosInstance: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// ËØ∑Ê±ÇÊã¶Êà™Âô®ÔºöËá™Âä®Ê∑ªÂä† token
axiosInstance.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    const token = localStorage.getItem('accessToken');
    
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// ÂìçÂ∫îÊã¶Êà™Âô®ÔºöËá™Âä®Â§ÑÁêÜ token ËøáÊúü
axiosInstance.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error: AxiosError) => {
    const originalRequest = error.config as InternalAxiosRequestConfig & { _retry?: boolean };

    // Â¶ÇÊûúÊòØ 401 ÈîôËØØ‰∏î‰∏çÊòØ refresh Êé•Âè£
    if (error.response?.status === 401 && !originalRequest._retry) {
      
      // Â¶ÇÊûúÊ≠£Âú®Âà∑Êñ∞ tokenÔºåÂ∞ÜËØ∑Ê±ÇÂä†ÂÖ•ÈòüÂàó
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedRequestsQueue.push({
            resolve: (token: string) => {
              if (originalRequest.headers) {
                originalRequest.headers.Authorization = `Bearer ${token}`;
              }
              resolve(axiosInstance(originalRequest));
            },
            reject: (err: any) => {
              reject(err);
            },
          });
        });
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        const refreshToken = localStorage.getItem('refreshToken');
        
        if (!refreshToken) {
          throw new Error('No refresh token available');
        }

        console.log('üîÑ ËÆøÈóÆ‰ª§ÁâåËøáÊúüÔºåÊ≠£Âú®Âà∑Êñ∞...');

        // Ë∞ÉÁî®Âà∑Êñ∞Êé•Âè£
        const response = await axios.post(`${API_BASE_URL}/api/v1/auth/refresh`, {
          refreshToken,
        });

        const { accessToken: newAccessToken, refreshToken: newRefreshToken } = response.data.data;

        // Êõ¥Êñ∞Êú¨Âú∞Â≠òÂÇ®
        localStorage.setItem('accessToken', newAccessToken);
        if (newRefreshToken) {
          localStorage.setItem('refreshToken', newRefreshToken);
        }

        console.log('‚úÖ ËÆøÈóÆ‰ª§ÁâåÂà∑Êñ∞ÊàêÂäü');

        // Êõ¥Êñ∞ÂéüËØ∑Ê±ÇÁöÑ token
        if (originalRequest.headers) {
          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        }

        // Â§ÑÁêÜÈòüÂàó‰∏≠ÁöÑËØ∑Ê±Ç
        failedRequestsQueue.forEach((req) => {
          req.resolve(newAccessToken);
        });
        failedRequestsQueue = [];

        // ÈáçÊñ∞ÂèëÈÄÅÂéüËØ∑Ê±Ç
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        console.error('‚ùå Âà∑Êñ∞ËÆøÈóÆ‰ª§ÁâåÂ§±Ë¥•:', refreshError);

        // Ê∏ÖÁ©∫ÈòüÂàó
        failedRequestsQueue.forEach((req) => {
          req.reject(refreshError);
        });
        failedRequestsQueue = [];

        // Ê∏ÖÈô§Êú¨Âú∞Â≠òÂÇ®
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('userInfo');

        // Âª∂ËøüÈáçÂÆöÂêëÂà∞ÁôªÂΩïÈ°µÔºåÁªôÁî®Êà∑‰∏Ä‰∫õÊó∂Èó¥‰øùÂ≠òÊï∞ÊçÆ
        setTimeout(() => {
          console.warn('‚ö†Ô∏è TokenÂà∑Êñ∞Â§±Ë¥•ÔºåÂç≥Â∞ÜË∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µ...');
          window.location.href = '/';
        }, 1000);

        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
